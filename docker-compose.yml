services:
  db:
    image: postgres:16-alpine
    container_name: sales-simulation-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: sales_simulation
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data

  backend:
    build:
      context: ./backend
    container_name: sales-simulation-backend
    depends_on:
      - db
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      APP_ENV: ${APP_ENV:-prod}
      PORT: ${PORT:-4000}
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@db:5432/sales_simulation}
      API_KEY: ${API_KEY:-super-secret-key}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-replace-me}
      REALTIME_MODEL: ${REALTIME_MODEL:-gpt-4o-realtime-preview}
      RESPONSES_MODEL: ${RESPONSES_MODEL:-gpt-4o-mini}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    ports:
      - '${PORT:-4000}:${PORT:-4000}'
    command: sh -c "npx prisma migrate deploy && node dist/server.js"

  frontend:
    build:
      context: ./frontend
    container_name: sales-simulation-frontend
    depends_on:
      - backend
    environment:
      APP_ENV: ${APP_ENV:-prod}
      VITE_API_KEY: ${API_KEY:-super-secret-key}
      VITE_ALLOWED_HOSTS: ${VITE_ALLOWED_HOSTS:-localhost}
      VITE_BACKEND_URL: ${VITE_BACKEND_URL:-http://backend:4000}
      VITE_HOST: ${VITE_HOST:-0.0.0.0}
      VITE_PORT: ${VITE_PORT:-3000}
    ports:
      - '${VITE_PORT:-3000}:${VITE_PORT:-3000}'
    command: npm run dev

  node-exporter:
    image: prom/node-exporter:latest
    container_name: sales-simulation-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/host'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host:ro

  prometheus:
    image: prom/prometheus:latest
    container_name: sales-simulation-prometheus
    restart: unless-stopped
    depends_on:
      - backend
      - node-exporter
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus-alerts.yml:/etc/prometheus/prometheus-alerts.yml:ro
      - prometheus_data:/prometheus
    ports:
      - '9090:9090'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

  alertmanager:
    image: prom/alertmanager:latest
    container_name: sales-simulation-alertmanager
    restart: unless-stopped
    depends_on:
      - prometheus
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    ports:
      - '9093:9093'
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'

  grafana:
    image: grafana/grafana:latest
    container_name: sales-simulation-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards:ro
    ports:
      - '3001:3000'

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
