services:
  db:
    image: postgres:16-alpine
    container_name: db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: alexpert
    # Database NOT exposed to host (security)
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  backend:
    build:
      context: ./backend
    container_name: backend
    depends_on:
      - db
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      APP_ENV: ${APP_ENV:-prod}
      PORT: 4000
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@db:5432/alexpert}
      API_KEY: ${API_KEY}  # Required - no weak default
      JWT_SECRET: ${JWT_SECRET}  # Required - no weak default
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      REALTIME_MODEL: ${REALTIME_MODEL:-gpt-4o-realtime-preview}
      RESPONSES_MODEL: ${RESPONSES_MODEL:-gpt-4o-mini}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    # Backend port NOT exposed in production (only accessible internally)
    # For development, use docker-compose.override.yml
    expose:
      - "4000"
    command: sh -c "npx prisma migrate deploy && node dist/server.js"
    networks:
      - app-network
      - frontend

  frontend:
    build:
      context: ./frontend
      target: production
    container_name: frontend
    depends_on:
      - backend
    environment:
      VITE_BACKEND_URL: http://backend:4000
      VITE_ALLOWED_HOSTS: ${VITE_ALLOWED_HOSTS:-localhost,.cloud-schulz.de,sales.cloud-schulz.de}
      # No API_KEY in frontend - all auth handled by backend
    ports:
      - '${VITE_PORT:-3000}:3000'
    networks:
      - app-network
      - frontend

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
  frontend:
    external: true
