name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Cache root npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-root-${{ hashFiles('package.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-root-

      - name: Install root dependencies
        run: npm install --prefer-offline

      - name: Run ESLint
        run: npm run lint

  build:
    name: Build (${{ matrix.project }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: [backend, frontend]
    defaults:
      run:
        working-directory: ${{ matrix.project }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Cache npm dependencies
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ matrix.project }}-${{ hashFiles('backend/package.json', 'frontend/package.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ matrix.project }}-
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: npm install --prefer-offline

      - name: Cache Prisma Client
        if: matrix.project == 'backend'
        id: cache-prisma
        uses: actions/cache@v4
        with:
          path: backend/node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('backend/prisma/schema.prisma') }}-${{ hashFiles('backend/package.json') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      - name: Generate Prisma Client
        if: matrix.project == 'backend'
        run: npm run prisma:generate

      - name: Build
        run: npm run build --if-present

  test:
    name: Test (${{ matrix.project }})
    runs-on: ubuntu-latest
    needs: [lint, build]
    strategy:
      fail-fast: false
      matrix:
        project: [backend, frontend]
    defaults:
      run:
        working-directory: ${{ matrix.project }}
    env:
      # Test credentials (loaded from vitest.setup.ts - no secrets needed in CI)
      NODE_ENV: test
      CI: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ matrix.project }}-${{ hashFiles('backend/package.json', 'frontend/package.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ matrix.project }}-
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: npm install --prefer-offline

      - name: Restore Prisma Client cache
        if: matrix.project == 'backend'
        uses: actions/cache/restore@v4
        with:
          path: backend/node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('backend/prisma/schema.prisma') }}-${{ hashFiles('backend/package.json') }}

      - name: Generate Prisma Client
        if: matrix.project == 'backend'
        run: npm run prisma:generate

      - name: Run tests
        run: npm test --if-present

      - name: Run tests with coverage
        if: matrix.project == 'backend'
        run: npm run test:coverage --if-present

      - name: Upload coverage reports
        if: matrix.project == 'backend'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/coverage-final.json
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.project }}
          path: |
            ${{ matrix.project }}/coverage/
            ${{ matrix.project }}/test-results/
          retention-days: 30

  docker:
    name: Build & Push Docker image (${{ matrix.service }})
    runs-on: ubuntu-latest
    needs:
      - test
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
          category: 'trivy-${{ matrix.service }}'

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    needs:
      - docker
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check if deployment is configured
        id: check-deploy
        run: |
          if [ -z "${{ secrets.DEPLOY_HOST }}" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "::notice::Deployment skipped - DEPLOY_HOST not configured"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy over SSH
        if: steps.check-deploy.outputs.skip == 'false'
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          port: ${{ secrets.DEPLOY_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          envs: GITHUB_TOKEN,REGISTRY,DEPLOY_WORKDIR
          script: |
            # Login to registry (token passed via env, not in command)
            echo "${GITHUB_TOKEN}" | docker login ${REGISTRY} -u ${{ github.actor }} --password-stdin

            # Navigate to deployment directory
            cd ${DEPLOY_WORKDIR}

            # Pull latest images
            docker compose pull

            # Deploy with zero-downtime (recreate changed containers)
            docker compose up -d --remove-orphans

            # Health check
            timeout 30 sh -c 'until docker compose exec -T backend wget --spider -q http://localhost:4000/health; do sleep 2; done' || echo "::warning::Health check timeout"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REGISTRY: ${{ env.REGISTRY }}
          DEPLOY_WORKDIR: ${{ secrets.DEPLOY_WORKDIR }}

      - name: Verify deployment
        if: steps.check-deploy.outputs.skip == 'false'
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          port: ${{ secrets.DEPLOY_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd ${{ secrets.DEPLOY_WORKDIR }}
            echo "=== Container Status ==="
            docker compose ps
            echo ""
            echo "=== Recent Logs (last 20 lines) ==="
            docker compose logs --tail=20
