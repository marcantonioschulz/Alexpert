name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Extract changelog for version
        id: changelog
        run: |
          VERSION=${{ steps.version.outputs.version }}

          # Extract section for this version from CHANGELOG.md
          if [ -f CHANGELOG.md ]; then
            # Get content between current version header and next version header
            CHANGELOG=$(sed -n "/^## \[$VERSION\]/,/^## \[/p" CHANGELOG.md | sed '$d')

            # If empty, use a default message
            if [ -z "$CHANGELOG" ]; then
              CHANGELOG="See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details."
            fi
          else
            CHANGELOG="Release $VERSION"
          fi

          # Write to file to handle multiline
          echo "$CHANGELOG" > changelog_excerpt.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: changelog_excerpt.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/alexpert-backend:latest
            ghcr.io/${{ github.repository_owner }}/alexpert-backend:${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          labels: |
            org.opencontainers.image.title=Alexpert Backend
            org.opencontainers.image.description=AI-powered sales training backend
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.licenses=UNLICENSED

      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/alexpert-frontend:latest
            ghcr.io/${{ github.repository_owner }}/alexpert-frontend:${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          labels: |
            org.opencontainers.image.title=Alexpert Frontend
            org.opencontainers.image.description=AI-powered sales training frontend
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.licenses=UNLICENSED

      - name: Comment on related issues
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.version.outputs.version }}';

            try {
              // Get all tags to find the previous release
              const { data: tags } = await github.rest.repos.listTags({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 10
              });

              // Find previous tag (skip the current one)
              const currentTag = `v${version}`;
              const previousTag = tags.find(tag => tag.name !== currentTag && tag.name.startsWith('v'));

              if (!previousTag) {
                console.log('No previous tag found, skipping issue comments');
                return;
              }

              console.log(`Comparing ${previousTag.name}...${currentTag}`);

              // Get commits between previous tag and current tag
              const { data: comparison } = await github.rest.repos.compareCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                base: previousTag.name,
                head: currentTag
              });

              // Extract issue numbers from commit messages
              const issueNumbers = new Set();
              const issueRegex = /#(\d+)/g;

              for (const commit of comparison.commits) {
                let match;
                while ((match = issueRegex.exec(commit.commit.message)) !== null) {
                  issueNumbers.add(match[1]);
                }
              }

              console.log(`Found ${issueNumbers.size} issues to comment on`);

              // Comment on each issue
              for (const issueNumber of issueNumbers) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: `ðŸŽ‰ This issue has been resolved in [v${version}](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/v${version})!`
                });
                console.log(`Commented on issue #${issueNumber}`);
              }
            } catch (error) {
              console.log(`Failed to comment on issues: ${error.message}`);
            }
