generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Conversation {
  id         String   @id @default(cuid())
  userId     String   @default("demo-user")
  transcript String?
  score      Int?
  feedback   String?
  createdAt  DateTime @default(now())
  logs       ConversationLog[]
}

enum ConversationLogType {
  TRANSCRIPT
  AI_FEEDBACK
  SCORING_CONTEXT
}

model ConversationLog {
  id              String               @id @default(cuid())
  conversation    Conversation         @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId  String
  role            String
  type            ConversationLogType
  content         String
  context         Json?
  createdAt       DateTime             @default(now())
}

model UserPreference {
  id             Int      @id @default(autoincrement())
  userId         String   @unique
  realtimeModel  String?  @default("gpt-4o-realtime-preview")
  responsesModel String?  @default("gpt-4o-mini")
  apiKeyOverride String?
  theme          String   @default("system")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model PromptSetting {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AdminUser {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  role         String   @default("admin")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
